/*
 * list
 *
 *  Created on: Nov 1, 2013
 *      Author: mavrick
 */
#include <iostream>
#include <list>
using namespace std;

class list{
public:
 list():head(0), cursor(0){}
 list(int s, list *p, list *q):d(s),head(p), cursor(q){}
 list(const int* arr, int n);
 list(const list& lst);//copy constructor
 void prepend(int n); //insert at front value n
 int get_element(){return cursor->d;}
 void advance(){ cursor= cursor-> next;}
 void print();

 ~list(); //delete
 private:
  int d;
  list* head;
  list* cursor;
 };

void list::prepend(int n)
 { if (head == 0)//empty list case
 cursor = head = new list(n,
head);
 else//add to front -chain
 head = new list(n, head);
 }


void list:: print(){
 list* h = head;
 while(h != 0){//idiom for chaining
 cout << h->d << ", ";
 h = h -> next;
 }
 cout << "###" << endl;
 }

int main()
{
 list a, b;
 a.prepend(9); a.prepend(8);
 cout << " list a " << endl;
 a.print();
 for (int i = 0; i < 40; ++i)
 b.prepend(i*i);
 cout << " list b " << endl;
 b.print();

 return(0);
}
